{"version":3,"sources":["components/Carve.js","components/App.js","serviceWorker.js","index.js"],"names":["Carve","props","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","_useState3","_useState4","loading","setLoading","_useState5","name","description","image_src","_useState6","crvData","setCrvData","_useState7","_useState8","minted","setMinted","_useState9","_useState10","msg","setMsg","id","crv","tokenURL","concat","_loadData","asyncToGenerator","regenerator_default","a","mark","_callee","isMinted","wrap","_context","prev","next","axios","method","url","headers","Content-Type","then","response","data","catch","error","methods","_isExists","call","sent","stop","apply","this","arguments","useEffect","loadData","react_default","createElement","Modal","onClose","onOpen","trigger","Button","color","size","fluid","Header","Content","image","Image","src","wrapped","Description","Message","Segment","basic","textAlign","Icon","Actions","onClick","event","preventDefault","mint","send","from","acc","value","once","confirmation","on","App","inp","setInp","setCrv","setAcc","_loadBlockchainData","web3","netId","accounts","crvd","loadAcc","window","ethereum","Web3","eth","net","getId","getAccounts","Carved","networks","Contract","abi","address","enable","loadBlockchainData","className","alt","width","negative","Form","Field","Input","placeholder","onChange","target","components_Carve","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.015fa2d5.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Button, Header, Image, Modal, Message, Icon, Segment } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nfunction Carve(props) {\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [loading,setLoading] = useState(false);\r\n  const [crvData, setCrvData] = useState({name:\"\",description:\"\",image_src:\"\"});\r\n  let [minted, setMinted] = useState(true);\r\n  let [msg, setMsg] = useState(\"\");\r\n  const id = props.id; \r\n  const crv = props.crv;\r\n  const tokenURL = \"https://hidden-woodland-17457.herokuapp.com/api/nfts/id/\".concat(id);\r\n\r\n  async function loadData(){\r\n\r\n    setMsg(\"\");\r\n\r\n        axios({\r\n          method: 'get',\r\n          url: tokenURL,   \r\n          headers: {\r\n              'Content-Type' : 'application/json'\r\n            }\r\n          })\r\n        .then(function (response) {\r\n            setCrvData(response.data);\r\n            })\r\n        .catch(function (error) {\r\n          setMsg(\"Error Loading Token Data. Please try again!\");\r\n        });\r\n     \r\n    if(typeof(crv.methods) !=='undefined' && crv.methods !== null){  \r\n      const isMinted = await crv.methods._isExists(id).call(); \r\n      setMinted(isMinted); \r\n    } \r\n  }\r\n\r\n  useEffect(() => {  \r\n    loadData();\r\n  },[props.id, open]) \r\n\r\n  function mintToken(event){\r\n    event.preventDefault();\r\n\r\n    setLoading(true);\r\n\r\n      crv.methods.mint(id).send({from:props.acc,value:\"100000000000000000\"})\r\n      .once('confirmation', (confirmation) => {\r\n        setLoading(false);\r\n        setMinted(true);\r\n        setMsg(\"Token minted successfully.\");\r\n      })\r\n      .on('error', (error) => {\r\n        setLoading(false);\r\n        setMsg(\"Transaction failed. Try again!\");\r\n      });\r\n   \r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Button color=\"black\" size=\"big\" fluid>Load Art</Button>}\r\n    >\r\n      <Modal.Header> Art Id: {id} </Modal.Header>\r\n      <Modal.Content image>\r\n        <Image size='medium' src={crvData.image_src} wrapped />\r\n        <Modal.Description>\r\n          <Header>{crvData.name}</Header>\r\n          <p>\r\n            {crvData.description}\r\n          </p>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      \r\n      { (msg)?\r\n        <Modal.Content>\r\n        <Message>\r\n          <Message.Header>{msg}</Message.Header>\r\n        </Message>\r\n        </Modal.Content>\r\n        :(minted)?\r\n        <Modal.Content>\r\n        <Message>\r\n          <Message.Header>Token already minted</Message.Header>\r\n          <p>\r\n           Please select another Id.\r\n          </p>\r\n        </Message>\r\n        </Modal.Content>\r\n        :loading?\r\n          <Modal.Content>\r\n          <Segment basic textAlign='center'>\r\n          <Icon loading name='spinner' color='blue' size='big' /> \r\n          </Segment>\r\n          </Modal.Content>\r\n        :<Modal.Actions>\r\n            <Button color='black' onClick={mintToken} >\r\n              Mint Carved Token @ 0.1 ETH\r\n            </Button>\r\n        </Modal.Actions>\r\n      }\r\n      \r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Carve;\r\n","import React, { useEffect, useState} from 'react';\r\nimport Web3 from 'web3';\r\nimport Carve from './Carve';\r\nimport Carved from '../abis/Carved.json';\r\nimport { Segment, Input, Form, Message } from 'semantic-ui-react';\r\n\r\nfunction App(props){\r\n    const [inp, setInp] = useState(0);\r\n    const [crv, setCrv] = useState({});\r\n    const [acc,setAcc] = useState();\r\n    let [msg, setMsg] = useState(\"\");\r\n\r\n    async function loadBlockchainData(){\r\n        setMsg(\"\");\r\n        if(typeof window.ethereum!=='undefined'){\r\n            const web3 = new Web3(window.ethereum);\r\n            const netId = await web3.eth.net.getId();\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            //load contracts\r\n            const crvData = Carved.networks[netId];\r\n      \r\n            //load account\r\n            if(typeof accounts[0] !=='undefined'){\r\n                setAcc(accounts[0]);\r\n                if(crvData) {\r\n                    const crvd = new web3.eth.Contract(Carved.abi, crvData.address);\r\n                    setCrv(crvd);\r\n                } else {\r\n                   setMsg('Carved contract not deployed to detected network.');\r\n                }\r\n            } else {\r\n                const loadAcc = await window.ethereum.enable();\r\n                setAcc(loadAcc[0]);\r\n            }\r\n      \r\n        } else {\r\n            setMsg('Please install MetaMask');\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {  \r\n        loadBlockchainData();\r\n    },[acc,setAcc,crv]) \r\n\r\n    function handleChange(event){\r\n        setInp(event.target.value);\r\n    }\r\n    \r\n  return(\r\n    <div className=\"main\">\r\n\r\n      <div className=\"mint\">\r\n     \r\n      <Segment basic textAlign=\"center\">\r\n      <img src=\"./images/logo_carved_white.webp\" alt=\"carved\" width=\"300\" />\r\n      </Segment>\r\n      \r\n      <Segment basic textAlign=\"center\">\r\n      \r\n        {(msg)&&\r\n            <Message negative>\r\n            <Message.Header>{msg}</Message.Header>\r\n            </Message>\r\n        }\r\n            <Form>\r\n            <Form.Field>\r\n            {(typeof(acc) !=='undefined' && acc !== null)?\r\n            <Input placeholder=\" Enter Token Id (1 - 100) \" onChange={handleChange} size=\"massive\" fluid />\r\n            :<Message negative>\r\n              <Message.Header>Please Login To Metamask Wallet</Message.Header>\r\n              </Message>\r\n            }\r\n            </Form.Field>\r\n            <Form.Field>\r\n            {\r\n             (inp>0 && inp<101)\r\n             &&<Carve id={inp} crv={crv} acc={acc} />\r\n            }\r\n            </Form.Field>\r\n            </Form>\r\n      </Segment>\r\n      </div>\r\n    </div>  \r\n  );\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}